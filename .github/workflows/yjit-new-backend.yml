name: YJIT New Backend Temp Checks
on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'

concurrency:
  group: ${{ github.workflow }} / ${{ startsWith(github.event_name, 'pull') && github.ref_name || github.sha }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull') }}

jobs:
  cargo:
    name: Rust cargo test new backend (x86)
    # GitHub Action's image seems to already contain a Rust 1.58.0.
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: RUST_BACKTRACE=1 cargo test
        working-directory: yjit
      # Also compile and test with all features enabled
      - run: RUST_BACKTRACE=1 cargo test --all-features
        working-directory: yjit
  make:
    name: build and test new backend (x86)
    runs-on: ubuntu-20.04
    steps:
      - name: Install libraries
        run: |
          set -x
          sudo apt-get update -q || :
          sudo apt-get install --no-install-recommends -q -y build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev bison autoconf ruby
      - uses: actions/checkout@v2
      - run: ./autogen.sh
      - run: CC=clang ./configure --enable-yjit=dev
      - run: make -j miniruby
      - run: make -j yjit-bindgen

      # Try booting miniruby
      - run: RUST_BACKTRACE=1 ./miniruby --yjit-call-threshold=1 -e0

      # Check that --yjit-dump-insns works correctly
      - run: RUST_BACKTRACE=1 ./miniruby --yjit-call-threshold=1 --yjit-dump-insns -e0

      # Try outputting stats (should be available in dev config)
      - run: RUST_BACKTRACE=1 ./miniruby --yjit-call-threshold=1 --yjit-stats -e0

      # Run bootstrap tests with --verify-ctx enabled
      - run: |
          RUST_BACKTRACE=1 ruby --disable=gems bootstraptest/runner.rb --ruby="./miniruby -I./lib -I. -I.ext/common --disable-gems --yjit-call-threshold=1 --yjit-verify-ctx" \
          bootstraptest/test_attr.rb \
          bootstraptest/test_autoload.rb \
          bootstraptest/test_block.rb \
          bootstraptest/test_class.rb \
          bootstraptest/test_constant_cache.rb \
          bootstraptest/test_env.rb \
          bootstraptest/test_eval.rb \
          bootstraptest/test_exception.rb \
          bootstraptest/test_fiber.rb \
          bootstraptest/test_finalizer.rb \
          bootstraptest/test_flip.rb \
          bootstraptest/test_flow.rb \
          bootstraptest/test_fork.rb \
          bootstraptest/test_gc.rb \
          bootstraptest/test_insns.rb \
          bootstraptest/test_io.rb \
          bootstraptest/test_jump.rb \
          bootstraptest/test_literal.rb \
          bootstraptest/test_literal_suffix.rb \
          bootstraptest/test_load.rb \
          bootstraptest/test_marshal.rb \
          bootstraptest/test_massign.rb \
          bootstraptest/test_method.rb \
          bootstraptest/test_objectspace.rb \
          bootstraptest/test_proc.rb \
          bootstraptest/test_string.rb \
          bootstraptest/test_struct.rb \
          bootstraptest/test_syntax.rb \
          bootstraptest/test_thread.rb \
          bootstraptest/test_yjit_new_backend.rb \
          bootstraptest/test_yjit_rust_port.rb

      # These are the btests we can't run yet on x86:
      #bootstraptest/test_ractor.rb (splitting error?)
      #bootstraptest/test_yjit.rb (multiple bugs)
      #bootstraptest/test_yjit_30k_ifelse.rb (missing iseq-to-iseq calls)
      #bootstraptest/test_yjit_30k_methods.rb (missing iseq-to-iseq calls)

      # Check that we can do a full build
      #- run: make -j
